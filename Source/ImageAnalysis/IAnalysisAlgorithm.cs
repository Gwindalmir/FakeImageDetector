using OpenCvSharp;
using System;
using System.Collections.Generic;
using System.Text;

namespace Gwindalmir.ImageAnalysis
{
    /// <summary>
    /// Common interface for all image analysis algorithms.
    /// </summary>
    public interface IAnalysisAlgorithm : IDisposable
    {
        /// <summary>
        /// The source image loaded as a <see cref="Mat">cv::Mat</see> instance.
        /// </summary>
        Mat SourceImage { get; }

        /// <summary>
        /// The result image as generated by the algorithm. Will be disposed with parent.
        /// </summary>
        Mat ResultImage { get; }

        /// <summary>
        /// Loads an image for processing.
        /// </summary>
        /// <param name="filename">The image to load.</param>
        void LoadImage(string filename);

        /// <summary>
        /// Process the image. Places the result into <see cref="ResultImage"/>.
        /// </summary>
        void AnalyzeImage();

        /// <summary>
        /// Process the image and save it to the specified location.
        /// </summary>
        /// <param name="targetFilename">Filename to save the processed result to.</param>
        void AnalyzeAndSave(string targetFilename);

        /// <summary>
        /// Process the image, and display an OpenCV window for manually adjusting parameters in real-time.
        /// </summary>
        void AnalyzeAndDisplay();

        /// <summary>
        /// Returns a copy of <see cref="ResultImage"/>. Caller must dispose the result.
        /// </summary>
        /// <returns></returns>
        Mat GetResultImageSafe();
    }
}
